
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author kean
 */
public class MenuGUI extends javax.swing.JFrame {

    /**
     * Creates new form MenuGUI
     */
    public MenuGUI() {
        
        initComponents();
        game.setVisible(false);
        menu.setVisible(true);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GameWindow = new javax.swing.JFrame();
        menu = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        game = new javax.swing.JPanel();
        button4 = new javax.swing.JButton();
        button0 = new javax.swing.JButton();
        button1 = new javax.swing.JButton();
        button2 = new javax.swing.JButton();
        button6 = new javax.swing.JButton();
        button5 = new javax.swing.JButton();
        button3 = new javax.swing.JButton();
        button7 = new javax.swing.JButton();
        button8 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        newgame = new javax.swing.JButton();
        endgame = new javax.swing.JButton();
        usernameLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        javax.swing.GroupLayout GameWindowLayout = new javax.swing.GroupLayout(GameWindow.getContentPane());
        GameWindow.getContentPane().setLayout(GameWindowLayout);
        GameWindowLayout.setHorizontalGroup(
            GameWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        GameWindowLayout.setVerticalGroup(
            GameWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(600, 600));
        setPreferredSize(new java.awt.Dimension(600, 600));
        setResizable(false);

        menu.setOpaque(false);
        menu.setPreferredSize(new java.awt.Dimension(600, 600));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Enter Username");

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 0, 48)); // NOI18N
        jLabel1.setText("Tic Tac Toe");

        jButton2.setText("Enter");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout menuLayout = new javax.swing.GroupLayout(menu);
        menu.setLayout(menuLayout);
        menuLayout.setHorizontalGroup(
            menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuLayout.createSequentialGroup()
                .addGroup(menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2)
                        .addGroup(menuLayout.createSequentialGroup()
                            .addGap(214, 214, 214)
                            .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(menuLayout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addComponent(jLabel1))
                    .addGroup(menuLayout.createSequentialGroup()
                        .addGap(247, 247, 247)
                        .addComponent(jButton2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        menuLayout.setVerticalGroup(
            menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(159, 159, 159)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jButton2)
                .addGap(78, 78, 78))
        );

        getContentPane().add(menu, java.awt.BorderLayout.CENTER);

        game.setPreferredSize(new java.awt.Dimension(600, 600));
        game.setLayout(null);

        button4.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        game.add(button4);
        button4.setBounds(190, 280, 110, 110);

        button0.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        button0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button0ActionPerformed(evt);
            }
        });
        game.add(button0);
        button0.setBounds(70, 160, 110, 110);

        button1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        game.add(button1);
        button1.setBounds(190, 160, 110, 110);

        button2.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        game.add(button2);
        button2.setBounds(310, 160, 110, 110);

        button6.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        game.add(button6);
        button6.setBounds(70, 400, 110, 110);

        button5.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        game.add(button5);
        button5.setBounds(310, 280, 110, 110);

        button3.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        game.add(button3);
        button3.setBounds(70, 280, 110, 110);

        button7.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        game.add(button7);
        button7.setBounds(190, 400, 110, 110);

        button8.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        game.add(button8);
        button8.setBounds(310, 400, 110, 110);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/board.png"))); // NOI18N
        game.add(jLabel3);
        jLabel3.setBounds(65, 102, 390, 469);

        newgame.setText("New Game");
        newgame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newgameActionPerformed(evt);
            }
        });
        game.add(newgame);
        newgame.setBounds(460, 400, 110, 40);

        endgame.setText("End Game");
        endgame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endgameActionPerformed(evt);
            }
        });
        game.add(endgame);
        endgame.setBounds(460, 450, 110, 40);

        usernameLabel.setFont(new java.awt.Font("Verdana", 0, 48)); // NOI18N
        usernameLabel.setToolTipText("");
        game.add(usernameLabel);
        usernameLabel.setBounds(70, 40, 280, 80);

        jLabel4.setFont(new java.awt.Font("Tekton Pro Cond", 0, 48)); // NOI18N
        jLabel4.setText("Tic Tac Toe");
        game.add(jLabel4);
        jLabel4.setBounds(410, 0, 180, 100);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/meme.JPG"))); // NOI18N
        game.add(jLabel6);
        jLabel6.setBounds(450, 90, 130, 120);

        getContentPane().add(game, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (username.getText().length() > 0) {
            menu.setVisible(false);
            game.setVisible(true);
            usernameLabel.setText(username.getText());
            talkToServer();
        }
        else
            JOptionPane.showMessageDialog(null, "Invalid username, try again!", "", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void button0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button0ActionPerformed
     
    }//GEN-LAST:event_button0ActionPerformed

    private void newgameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newgameActionPerformed
        
    }//GEN-LAST:event_newgameActionPerformed

    private void endgameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endgameActionPerformed
        System.exit(0);
    }//GEN-LAST:event_endgameActionPerformed

    
    public void talkToServer() {
        try {
            Socket socket = new Socket("codebank.xyz", 38006);
            InputStream is = socket.getInputStream();
            ObjectInputStream ois = new ObjectInputStream(is);
            OutputStream os = socket.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);
            gameStart(oos);
            
            BoardMessage boardMessage = (BoardMessage) ois.readObject();
            byte[][] gameBoard = boardMessage.getBoard();
            //boardMessage = (BoardMessage) firstMove(boardMessage, oos, ois);
            
            
            button0.addActionListener(new ActionListener() {
                   @Override
                   public void actionPerformed(ActionEvent e) {
                      
                       sendMove(oos, (byte)0, (byte)0);
                       button0.setText("X");
                       button0.setEnabled(false);
                       try {
                           recvMove(gameBoard, boardMessage, ois);
                       } catch (IOException ex) {
                           Logger.getLogger(MenuGUI.class.getName()).log(Level.SEVERE, null, ex);
                       } catch (ClassNotFoundException ex) {
                           Logger.getLogger(MenuGUI.class.getName()).log(Level.SEVERE, null, ex);
                       }
                       update(gameBoard);
                       
                      
                       checkStatus(boardMessage);
                       
                   }
               });
               
            button1.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    sendMove(oos, (byte)1, (byte)0);
                    button1.setText("X");
                    button1.setEnabled(false);
                    try {
                           recvMove(gameBoard, boardMessage, ois);
                       } catch (IOException ex) {
                           Logger.getLogger(MenuGUI.class.getName()).log(Level.SEVERE, null, ex);
                       } catch (ClassNotFoundException ex) {
                           Logger.getLogger(MenuGUI.class.getName()).log(Level.SEVERE, null, ex);
                       }
                       update(gameBoard);
                    
                    checkStatus(boardMessage);
                }
            });

            button2.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    sendMove(oos, (byte)2, (byte)0);
                    button2.setText("X");
                    button2.setEnabled(false);
                    try {
                           recvMove(gameBoard, boardMessage, ois);
                       } catch (IOException ex) {
                           Logger.getLogger(MenuGUI.class.getName()).log(Level.SEVERE, null, ex);
                       } catch (ClassNotFoundException ex) {
                           Logger.getLogger(MenuGUI.class.getName()).log(Level.SEVERE, null, ex);
                       }
                       update(gameBoard);
                    
                    checkStatus(boardMessage);
                }
            });

            button3.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    sendMove(oos, (byte)0, (byte)1);
                    button3.setText("X");
                    button3.setEnabled(false);
                    try {
                           recvMove(gameBoard, boardMessage, ois);
                       } catch (IOException ex) {
                           Logger.getLogger(MenuGUI.class.getName()).log(Level.SEVERE, null, ex);
                       } catch (ClassNotFoundException ex) {
                           Logger.getLogger(MenuGUI.class.getName()).log(Level.SEVERE, null, ex);
                       }
                       update(gameBoard);
                    
                    checkStatus(boardMessage);
                }
            });

            button4.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    sendMove(oos, (byte)1, (byte)1);
                    button4.setText("X");
                    button4.setEnabled(false);
                    try {
                           recvMove(gameBoard, boardMessage, ois);
                       } catch (IOException ex) {
                           Logger.getLogger(MenuGUI.class.getName()).log(Level.SEVERE, null, ex);
                       } catch (ClassNotFoundException ex) {
                           Logger.getLogger(MenuGUI.class.getName()).log(Level.SEVERE, null, ex);
                       }
                       update(gameBoard);
                    
                    checkStatus(boardMessage);
                }
            });

            button5.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    sendMove(oos, (byte)2, (byte)1);
                    button5.setText("X");
                    button5.setEnabled(false);
                    try {
                           recvMove(gameBoard, boardMessage, ois);
                       } catch (IOException ex) {
                           Logger.getLogger(MenuGUI.class.getName()).log(Level.SEVERE, null, ex);
                       } catch (ClassNotFoundException ex) {
                           Logger.getLogger(MenuGUI.class.getName()).log(Level.SEVERE, null, ex);
                       }
                       update(gameBoard);
                    
                    checkStatus(boardMessage);
                }
            });

            button6.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    sendMove(oos, (byte)0, (byte)2);
                    button6.setText("X");
                    button6.setEnabled(false);
                    try {
                           recvMove(gameBoard, boardMessage, ois);
                       } catch (IOException ex) {
                           Logger.getLogger(MenuGUI.class.getName()).log(Level.SEVERE, null, ex);
                       } catch (ClassNotFoundException ex) {
                           Logger.getLogger(MenuGUI.class.getName()).log(Level.SEVERE, null, ex);
                       }
                       update(gameBoard);
                    
                    checkStatus(boardMessage);
                }
            });

            button7.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    sendMove(oos, (byte)1, (byte)2);
                    button7.setText("X");
                    button7.setEnabled(false);
                    try {
                           recvMove(gameBoard, boardMessage, ois);
                       } catch (IOException ex) {
                           Logger.getLogger(MenuGUI.class.getName()).log(Level.SEVERE, null, ex);
                       } catch (ClassNotFoundException ex) {
                           Logger.getLogger(MenuGUI.class.getName()).log(Level.SEVERE, null, ex);
                       }
                       update(gameBoard);
                    
                    checkStatus(boardMessage);
                }
            });

            button8.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    sendMove(oos, (byte)2, (byte)2);
                    button8.setText("X");
                    button8.setEnabled(false);
                    try {
                           recvMove(gameBoard, boardMessage, ois);
                       } catch (IOException ex) {
                           Logger.getLogger(MenuGUI.class.getName()).log(Level.SEVERE, null, ex);
                       } catch (ClassNotFoundException ex) {
                           Logger.getLogger(MenuGUI.class.getName()).log(Level.SEVERE, null, ex);
                       }
                       update(gameBoard);
                    
                    checkStatus(boardMessage);
                }
            });
            
            newgame.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                enableAndClearAllButtons();
                try {
                    socket.close();
                    is.close();
                    ois.close();
                    oos.close();
                    os.close();
                } catch (IOException ex) {
                    Logger.getLogger(MenuGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                talkToServer();
            }
        });
            
            
               
               
               
               /*   
            if (((BoardMessage) boardMessage).getStatus() == BoardMessage.Status.ERROR)
                JOptionPane.showMessageDialog(null, "Selection Error\nTry Again", "", JOptionPane.INFORMATION_MESSAGE);
            */
            
        } catch (Exception e) {}
    }
    
    public void checkStatus(BoardMessage boardMessage) {
         if (boardMessage.getStatus() == BoardMessage.Status.PLAYER1_VICTORY) {
            JOptionPane.showMessageDialog(null, "You Win!", "", JOptionPane.INFORMATION_MESSAGE);
            disableAllButtons();
         }
        if(boardMessage.getStatus() == BoardMessage.Status.PLAYER2_VICTORY) {
            JOptionPane.showMessageDialog(null, "You Lose!", "", JOptionPane.INFORMATION_MESSAGE);
            disableAllButtons();
        }
        if (boardMessage.getStatus() == BoardMessage.Status.STALEMATE) {
            JOptionPane.showMessageDialog(null, "Stalemate", "", JOptionPane.INFORMATION_MESSAGE);
            disableAllButtons();
        }
        
    }
    
    public void enableAndClearAllButtons() {
        button0.setText("");
        button0.setEnabled(true);
        
        button1.setText("");
        button1.setEnabled(true);
        
        button2.setText("");
        button2.setEnabled(true);
        
        button3.setText("");
        button3.setEnabled(true);
        
        button4.setText("");
        button4.setEnabled(true);
        
        button5.setText("");
        button5.setEnabled(true);
        
        button6.setText("");
        button6.setEnabled(true);
        
        button7.setText("");
        button7.setEnabled(true);
        
        button8.setText("");
        button8.setEnabled(true);
        
    }
   
    public void disableAllButtons() {
        button0.setEnabled(false);
        button1.setEnabled(false);
        button2.setEnabled(false);
        button3.setEnabled(false);
        button4.setEnabled(false);
        button5.setEnabled(false);
        button6.setEnabled(false);
        button7.setEnabled(false);
        button8.setEnabled(false);
    }
    
    public void recvMove(byte[][] gameBoard, BoardMessage boardMessage, ObjectInputStream ois) throws IOException, ClassNotFoundException {
        boardMessage = (BoardMessage) ois.readObject();
        gameBoard = boardMessage.getBoard();
        update(gameBoard);
        checkStatus(boardMessage);
        
        
    }
   
    public void update(byte[][] gameBoard) {
        for (int i = 0; i < gameBoard.length; i++) {
            for (int j = 0; j < gameBoard[i].length; j++) {
                if (gameBoard[i][j] == 2) {
                    if (i == 0 && j == 0) {
                        button0.setText("O");
                        button0.setEnabled(false);
                    }
                    
                    if (i==1 && j == 0) {
                        button1.setText("O");
                        button1.setEnabled(false);
                    }
                    
                    if (i==2 && j==0) {
                        button2.setText("O");
                        button2.setEnabled(false);
                    }
                    
                    if (i==0 && j==1) {
                        button3.setText("O");
                        button3.setEnabled(false);
                    }
                    
                    if(i==1 && j==1) {
                        button4.setText("O");
                        button4.setEnabled(false);
                    }
                    
                    if(i==2 && j==1) {
                        button5.setText("O");
                        button5.setEnabled(false);
                    }
                    
                    if (i==0 && j==2) {
                        button6.setText("O");
                        button6.setEnabled(false);
                    }
                    
                    if (i==1 && j==2) {
                        button7.setText("O");
                        button7.setEnabled(false);
                    }
                    
                    if (i==2 && j==2) {
                        button8.setText("O");
                        button8.setEnabled(false);
                    }
                }
            }
        }
    }
    
    public void sendMove(ObjectOutputStream oos, byte row, byte col) {
        try {
            MoveMessage move = new MoveMessage(row, col);
            oos.writeObject(move);
            
        } catch (Exception e) {}
    }
    
    public void gameStart(ObjectOutputStream oos) {
        try {
            ConnectMessage connect = new ConnectMessage(username.getText());
            oos.writeObject(connect);
            
            CommandMessage command = new CommandMessage(CommandMessage.Command.NEW_GAME);
            oos.writeObject(command);
        } catch (IOException e) {}
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
      
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame GameWindow;
    private javax.swing.JButton button0;
    private javax.swing.JButton button1;
    private javax.swing.JButton button2;
    private javax.swing.JButton button3;
    private javax.swing.JButton button4;
    private javax.swing.JButton button5;
    private javax.swing.JButton button6;
    private javax.swing.JButton button7;
    private javax.swing.JButton button8;
    private javax.swing.JButton endgame;
    private javax.swing.JPanel game;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel menu;
    private javax.swing.JButton newgame;
    private javax.swing.JTextField username;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables
}
